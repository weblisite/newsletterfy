import { createClientComponentClient } from "@supabase/auth-helpers-nextjs"; import { NextResponse } from "next/server"; export async function POST(request) { try { const supabase = createClientComponentClient(); const { data: { session } } = await supabase.auth.getSession(); if (!session) { return NextResponse.json({ error: "Unauthorized" }, { status: 401 }); } const { month, year } = await request.json(); const currentDate = new Date(); const targetMonth = month || currentDate.getMonth() + 1; const targetYear = year || currentDate.getFullYear(); const monthStart = new Date(targetYear, targetMonth - 1, 1); const monthEnd = new Date(targetYear, targetMonth, 0); const monthStartStr = monthStart.toISOString().split("T")[0]; const monthEndStr = monthEnd.toISOString().split("T")[0]; const { data: activeReferrals, error: referralsError } = await supabase.from("affiliate_referrals").select("id, user_id, amount, subscription_id, subscription_status, is_recurring, last_commission_date").eq("is_recurring", true).eq("subscription_status", "active").or(`last_commission_date.is.null,last_commission_date.lt.${monthStartStr}`); if (referralsError) { return NextResponse.json({ error: "Failed to fetch active referrals" }, { status: 500 }); } let processedCount = 0; let totalCommissionAmount = 0; for (const referral of activeReferrals) { const commissionAmount = referral.amount * 0.20; await supabase.from("affiliate_commission_payments").insert({ referral_id: referral.id, affiliate_user_id: referral.user_id, subscription_id: referral.subscription_id, commission_amount: commissionAmount, subscription_amount: referral.amount, commission_rate: 0.20, payment_period_start: monthStartStr, payment_period_end: monthEndStr, status: "pending" }); await supabase.from("affiliate_referrals").update({ monthly_commission: commissionAmount, total_commission_paid: (referral.total_commission_paid || 0) + commissionAmount, last_commission_date: monthStartStr }).eq("id", referral.id); processedCount++; totalCommissionAmount += commissionAmount; } return NextResponse.json({ success: true, processed_referrals: processedCount, total_commission_amount: totalCommissionAmount }); } catch (error) { return NextResponse.json({ error: "Internal server error" }, { status: 500 }); } }
