import { createClientComponentClient } from "@supabase/auth-helpers-nextjs"; import { NextResponse } from "next/server"; export async function POST(request) { try { const supabase = createClientComponentClient(); const { data: { session } } = await supabase.auth.getSession(); if (!session) { return NextResponse.json({ error: "Unauthorized" }, { status: 401 }); } const { opportunity_id } = await request.json(); if (!opportunity_id) { return NextResponse.json({ error: "Opportunity ID is required" }, { status: 400 }); } const { data: opportunity, error: oppError } = await supabase.from("cross_promotion_opportunities").select("*").eq("id", opportunity_id).single(); if (oppError || !opportunity) { return NextResponse.json({ error: "Opportunity not found" }, { status: 404 }); } const { data: existingApp } = await supabase.from("cross_promotion_applications").select("id").eq("user_id", session.user.id).eq("opportunity_id", opportunity_id).single(); if (existingApp) { return NextResponse.json({ error: "You have already applied to this opportunity" }, { status: 400 }); } const { data: application, error } = await supabase.from("cross_promotion_applications").insert({ user_id: session.user.id, opportunity_id: opportunity_id, newsletter_name: opportunity.newsletter_name, description: opportunity.description, budget: opportunity.budget, status: "pending" }).select().single(); if (error) { return NextResponse.json({ error: "Failed to submit application" }, { status: 500 }); } return NextResponse.json({ success: true, application }); } catch (error) { return NextResponse.json({ error: "Internal server error" }, { status: 500 }); } }
